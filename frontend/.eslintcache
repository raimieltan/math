[{"C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\index.js":"1","C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\App.js":"3","C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\homepage.jsx":"4","C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\problem.jsx":"5","C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\main-page.jsx":"6","C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\login.jsx":"7","C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\about.jsx":"8","C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\profile.jsx":"9","C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\createProblem.jsx":"10","C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\signup.jsx":"11","C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\tacher-page.jsx":"12","C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\quiz.jsx":"13","C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\problemCard.jsx":"14"},{"size":517,"mtime":1614051896261,"results":"15","hashOfConfig":"16"},{"size":375,"mtime":1614051896261,"results":"17","hashOfConfig":"16"},{"size":2703,"mtime":1614506218582,"results":"18","hashOfConfig":"16"},{"size":1056,"mtime":1614440134207,"results":"19","hashOfConfig":"16"},{"size":6292,"mtime":1614440134209,"results":"20","hashOfConfig":"16"},{"size":2054,"mtime":1614440134208,"results":"21","hashOfConfig":"16"},{"size":2622,"mtime":1614051896247,"results":"22","hashOfConfig":"16"},{"size":171,"mtime":1614051896246,"results":"23","hashOfConfig":"16"},{"size":2525,"mtime":1614051896250,"results":"24","hashOfConfig":"16"},{"size":9635,"mtime":1614516450512,"results":"25","hashOfConfig":"16"},{"size":3673,"mtime":1614440134211,"results":"26","hashOfConfig":"16"},{"size":2739,"mtime":1614506218586,"results":"27","hashOfConfig":"16"},{"size":6487,"mtime":1614523726793,"results":"28","hashOfConfig":"16"},{"size":4165,"mtime":1614440134210,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1ab1w48",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},"C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\index.js",[],["63","64"],"C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\App.js",[],"C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\homepage.jsx",[],"C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\problem.jsx",["65","66","67","68","69","70","71","72","73","74","75","76","77","78","79"],"import { Fragment, useState, useEffect } from 'react';\r\nimport './style.css';\r\nimport ProblemCard from './problemCard'\r\n\r\nexport default function Quiz() {\r\n  // variable_x: 56, variable_y: 36\r\n  const [problems, setProblems] = useState([]);\r\n  const [showScore, setShowScore] = useState(false)\r\n  const [score, setScore] = useState(0)\r\n  const [choices, setChoices] = useState([])\r\n  const choicesLetters = [1, 2, 3, 4]\r\n  const [variables, setVariables] = useState({});\r\n  const [currentProblem, setCurrentProblem] = useState({});\r\n  const [blankInput, setBlankInput] = useState();\r\n  const [showSolution, setShowSolution] = useState(false);\r\n  const [correct, setCorrect] = useState();\r\n\r\n  const shuffleArray = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n  }\r\n\r\n  const fetchProblems = async () => {\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/problems\");\r\n      const parseRes = await response.json()\r\n      shuffleArray(parseRes)\r\n      setProblems(parseRes);\r\n      console.log(problems)\r\n\r\n    } catch (error) {\r\n      console.error(\"Error encountered on the frontend. ERROR: \", error.message);\r\n    }\r\n  }\r\n\r\n  const fetchValues = async () => {\r\n\r\n    try {\r\n\r\n      const response = await fetch(\"http://localhost:8000/variables\")\r\n      const parseRes = await response.json()\r\n\r\n      //shuffle values\r\n      shuffleArray(parseRes);\r\n      setVariables(parseRes[0]);\r\n\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n\r\n  }\r\n\r\n  const fetchQuestions = () => {\r\n\r\n    try {\r\n\r\n      let fillBlanksProblems =\r\n        [\r\n          {\r\n            id: 1,\r\n            problem: `Use long multiplication to calculate ${variables.variable_x} X ${variables.variable_y}`,\r\n            answer: eval(\"variables.variable_x * variables.variable_y\"),\r\n            solution: 'Multiply the values.'\r\n          },\r\n\r\n          {\r\n            id: 2,\r\n            problem: `What is the difference of ${variables.variable_x} - ${variables.variable_y}`,\r\n            answer: eval(\"variables.variable_x - variables.variable_y\"),\r\n            solution: 'Subtract the values.'\r\n          },\r\n\r\n          {\r\n            id: 3,\r\n            problem: `What is the sum of ${variables.variable_x} and ${variables.variable_y}`,\r\n            answer: eval(\"variables.variable_x + variables.variable_y\"),\r\n            solution: 'Add the values.'\r\n          }\r\n        ]\r\n\r\n      // shuffle questions\r\n      shuffleArray(fillBlanksProblems);\r\n      setCurrentProblem(fillBlanksProblems[0]);\r\n\r\n    } catch (error) {\r\n      console.error(\"ERROR:\", error.message)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchQuestions();\r\n  }, [variables])\r\n\r\n  useEffect(() => {\r\n    fetchValues();\r\n    fetchProblems();\r\n\r\n  }, []);\r\n\r\n\r\n\r\n  const addScore = () => {\r\n    setScore(score + 1)\r\n\r\n  }\r\n\r\n  const submitTest = () => {\r\n    setShowScore(true)\r\n  }\r\n\r\n  return problems.length > 0 ? (\r\n\r\n    <div>\r\n\r\n      {showScore ? (\r\n        <div>\r\n          <div class=\"header\">\r\n\r\n            <a href=\"/\">\r\n              <div id=\"logo\"></div>\r\n            </a>\r\n\r\n            <ul>\r\n              <li class=\"selected\">\r\n                <a href=\"/main-page\">Home</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"/profile\">Profile</a>\r\n              </li>\r\n              <li>\r\n                <a href=\"/learn\">Learn</a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <h1>Your score is {score} </h1>\r\n        </div>\r\n      ) : (\r\n\r\n          <div>\r\n            <div class=\"header\">\r\n\r\n              <a href=\"/\">\r\n                <div id=\"logo\"></div>\r\n              </a>\r\n\r\n              <ul>\r\n                <li class=\"selected\">\r\n                  <a href=\"/main-page\">Home</a>\r\n                </li>\r\n                <li>\r\n                  <a href=\"/profile\">Profile</a>\r\n                </li>\r\n                <li>\r\n                  <a href=\"/learn\">Learn</a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n\r\n            <div>\r\n\r\n              <div id=\"carouselExampleControls\" class=\"carousel slide\" data-interval=\"false\">\r\n                <div class=\"carousel-inner\">\r\n                  <div class=\"carousel-item active\">\r\n                    <ProblemCard\r\n                      id={currentProblem.id}\r\n                      problem={currentProblem.problem}\r\n                      solution={currentProblem.solution}\r\n                      answer={currentProblem.answer}\r\n                      addScore={addScore}\r\n                      index={problems.length}\r\n                      formula={true}\r\n                    />\r\n                  </div>\r\n                  {\r\n                    problems.map((problem) => {\r\n                      return <div class=\"carousel-item\">\r\n                        <ProblemCard\r\n                          id={problem.problem_id}\r\n                          problem={problem.problem_title}\r\n                          solution={problem.problem_solution}\r\n                          answer={problem.problem_answer}\r\n                          addScore={addScore}\r\n                          index={problems.indexOf(problem)}\r\n                          formula={false}\r\n                        />\r\n                      </div>\r\n\r\n                    })\r\n                  }\r\n\r\n                </div>\r\n                <a class=\"carousel-control-prev\" href=\"#carouselExampleControls\" role=\"button\" data-slide=\"prev\">\r\n\r\n                  <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\r\n                  <span class=\"sr-only\">Previous</span>\r\n\r\n                </a>\r\n                <a class=\"carousel-control-next\" href=\"#carouselExampleControls\" role=\"button\" data-slide=\"next\">\r\n                  <span class=\"carousel-control-next-icon\" aria-hidden=\"true\">                </span>\r\n                  <span class=\"sr-only\">Next</span>\r\n                </a>\r\n              </div>\r\n            </div>\r\n\r\n            <div >\r\n              <button class=\"submit-button\" onClick={() => { submitTest() }}>Submit Quiz</button>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n    </div>\r\n\r\n\r\n\r\n  ) : (\r\n      <h1>Loading..</h1>\r\n    )\r\n} ","C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\main-page.jsx",[],"C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\login.jsx",[],"C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\about.jsx",[],"C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\profile.jsx",[],"C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\createProblem.jsx",["80","81","82"],"import React, { Fragment, useState, useEffect } from 'react';\r\n\r\nexport default function CreateProblem() {\r\n\r\n  const [variables, setVariables] = useState([]);\r\n  const [type, setType] = useState(0);\r\n\r\n  const [inputs, setInputs] = useState({\r\n    question: \"\",\r\n    formula: \"\",\r\n    choiceCount: \"\",\r\n    variableName: \"\",\r\n    variableMin: \"\",\r\n    variableMax: \"\"\r\n  });\r\n\r\n  const { question, formula, choiceCount, variableName, variableMin, variableMax } = inputs;\r\n\r\n  const handleType = (e) => {\r\n    const id = e.target.value;\r\n    setType(id);\r\n  }\r\n\r\n  const fillInTheBlankSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const body = { question, formula, choiceCount: null, type: 'fillInTheBlanks' };\r\n\r\n    try {\r\n\r\n      const response = await fetch(\"http://localhost:8000/problems/create\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(body)\r\n      })\r\n\r\n      const parseRes = await response.json();\r\n      const problemId = parseRes.rows[0].id;\r\n\r\n\r\n      for (const addedVariables of variables) {\r\n\r\n        try {\r\n\r\n          const body = { variable: addedVariables.variable, min: addedVariables.min, max: addedVariables.max };\r\n\r\n          const response = await fetch(`http://localhost:8000/variables/assign/${problemId}`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify(body)\r\n          })\r\n\r\n          const parseRes = await response.json();\r\n\r\n        } catch (error) {\r\n          console.log(\"ERROR:\", error.message);\r\n        }\r\n\r\n      }\r\n\r\n      window.alert(\"Problem Added Successfully!\")\r\n\r\n    } catch (error) {\r\n      console.log(\"ERROR:\", error.message);\r\n    }\r\n  }\r\n\r\n  const multipleChoiceSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const body = { question, formula, choiceCount, type: 'multipleChoice' };\r\n\r\n    try {\r\n\r\n      const response = await fetch(\"http://localhost:8000/problems/create\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(body)\r\n      })\r\n\r\n      const parseRes = await response.json();\r\n      const problemId = parseRes.rows[0].id;\r\n\r\n\r\n      for (const addedVariables of variables) {\r\n\r\n        try {\r\n\r\n          const body = { variable: addedVariables.variable, min: addedVariables.min, max: addedVariables.max };\r\n\r\n          const response = await fetch(`http://localhost:8000/variables/assign/${problemId}`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify(body)\r\n          })\r\n\r\n          const parseRes = await response.json();\r\n\r\n        } catch (error) {\r\n          console.log(\"ERROR:\", error.message);\r\n        }\r\n\r\n      }\r\n\r\n      window.alert(\"Problem Added Successfully!\")\r\n\r\n    } catch (error) {\r\n      console.log(\"ERROR:\", error.message);\r\n    }\r\n  }\r\n\r\n  const handleInputs = (e) => {\r\n    e.preventDefault();\r\n    setInputs({\r\n      question,\r\n      formula,\r\n      variableName,\r\n      variableMin,\r\n      variableMax,\r\n      [e.target.id]: e.target.value\r\n    })\r\n  }\r\n\r\n  const addVariable = (e) => {\r\n    e.preventDefault();\r\n    setVariables(variable => variable.concat({ variable: variableName, min: variableMin, max: variableMax }))\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n  })\r\n\r\n  return (\r\n    <Fragment>\r\n      <div class=\"header\">\r\n        <div>\r\n\r\n          <a href=\"/main-page\">\r\n            <div id=\"logo\"></div>\r\n          </a>\r\n\r\n          <ul>\r\n            <li class=\"selected\">\r\n              <a href=\"/main-page\">Home</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"/profile\">Profile</a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div> <br /> <br />\r\n\r\n      <div id = \"accordion\" onChange={handleType}>\r\n        <p  > \r\n          <button class=\"btn btn-primary\" type=\"button\" data-toggle=\"collapse\" data-target=\"#formula-prob\" aria-expanded=\"false\" aria-controls=\"collapseExample\">Formula Problem</button>\r\n          <button class=\"btn btn-primary\" type=\"button\" data-toggle=\"collapse\" data-target=\"#multiple-prob\" aria-expanded=\"false\" aria-controls=\"collapseExample\">Multiple Choice Problem</button>\r\n        </p>\r\n        <div class=\"collapse\" id=\"formula-prob\" data-parent=\"#accordion\">\r\n          <div class=\"card prob\"> \r\n            <div id=\"fillInTheBlanks\">\r\n              <form onSubmit={fillInTheBlankSubmit}>\r\n                <textarea\r\n                  placeholder=\"Enter Question Here\"\r\n                  id=\"question\"\r\n                  value={question}\r\n                  rows=\"2\"\r\n                  cols=\"10\"\r\n                  class=\"form-control\"\r\n                  onChange={handleInputs}\r\n                />\r\n\r\n                <input\r\n                  placeholder=\"Enter Formula Here\"\r\n                  id=\"formula\"\r\n                  value={formula}\r\n                  class=\"form-control\"\r\n                  onChange={handleInputs}\r\n                />\r\n\r\n                <span id=\"variable-inputs\">\r\n                  <input\r\n                    id=\"variableName\"\r\n                    value={variableName}\r\n                    placeholder=\"Variable Name\"\r\n                    onChange={handleInputs}\r\n                  />\r\n                  <input\r\n                    type=\"number\"\r\n                    id=\"variableMax\"\r\n                    value={variableMax}\r\n                    placeholder=\"Max Value\"\r\n                    onChange={handleInputs}\r\n                  />\r\n                  <input\r\n                    type=\"number\"\r\n                    id=\"variableMin\"\r\n                    value={variableMin}\r\n                    placeholder=\"Min Value\"\r\n                    onChange={handleInputs}\r\n                  />\r\n                </span>\r\n\r\n                <div>\r\n                  <button id=\"add-variable\" onClick={addVariable}>Add Variable</button>\r\n                </div>\r\n\r\n                <div class=\"container\" id=\"variable-container\">\r\n                  {variables.length !== 0\r\n                    ?\r\n                    variables.map(variable =>\r\n                      <div>\r\n                        <div id=\"variable-box\">\r\n                          Variable Name: {variable.variable}<br />\r\n                        Variable Min: {variable.min}<br />\r\n                        Variable Max: {variable.max}<br />\r\n                        </div>\r\n                      </div>\r\n                    )\r\n                    :\r\n                    \"\"\r\n                  }\r\n                </div>\r\n\r\n                <button id=\"form\">Add Problem</button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"collapse\" id=\"multiple-prob\" data-parent=\"#accordion\">\r\n          <div class=\"card prob\">\r\n            <div id=\"multiple-choices\">\r\n              <form onSubmit={multipleChoiceSubmit}>\r\n\r\n                <textarea\r\n                  placeholder=\"Enter Question Here\"\r\n                  id=\"question\"\r\n                  value={question}\r\n                  class=\"form-control\"\r\n                  onChange={handleInputs}\r\n                />\r\n\r\n                <input\r\n                  placeholder=\"Enter Formula Here\"\r\n                  id=\"formula\"\r\n                  value={formula}\r\n                  class=\"form-control\"\r\n                  onChange={handleInputs}\r\n                />\r\n\r\n                <span id=\"variable-inputs\">\r\n                  <input\r\n                    id=\"variableName\"\r\n                    value={variableName}\r\n                    placeholder=\"Variable Name\"\r\n                    onChange={handleInputs}\r\n                  />\r\n                  <input\r\n                    type=\"number\"\r\n                    id=\"variableMax\"\r\n                    value={variableMax}\r\n                    placeholder=\"Max Value\"\r\n                    onChange={handleInputs}\r\n                  />\r\n                  <input\r\n                    type=\"number\"\r\n                    id=\"variableMin\"\r\n                    value={variableMin}\r\n                    placeholder=\"Min Value\"\r\n                    onChange={handleInputs}\r\n                  />\r\n                </span>\r\n\r\n                <button id=\"add-variables\" onClick={addVariable}>Add Variable</button>\r\n\r\n                <div class=\"container\" id=\"variable-container\">\r\n                  {variables.length !== 0\r\n                    ?\r\n                    variables.map(variable =>\r\n                      <div>\r\n                        <div id=\"variable-box\">\r\n                          Variable Name: {variable.variable}<br />\r\n                    Variable Min: {variable.min}<br />\r\n                    Variable Max: {variable.max}<br />\r\n                        </div>\r\n                      </div>\r\n                    )\r\n                    :\r\n                    \"\"\r\n                  }\r\n                </div>\r\n\r\n                <div>\r\n                  <input\r\n                    type=\"number\"\r\n                    id=\"choiceCount\"\r\n                    value={choiceCount}\r\n                    placeholder=\"Number of Choices\"\r\n                    onChange={handleInputs}\r\n                  />\r\n                </div>\r\n\r\n                <button id=\"form\">Add Problem</button>\r\n\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <select id=\"problemType\" class=\"form form-select\" onChange={handleType} >\r\n        <option value=\"1\">Multiple Choice</option>\r\n        <option value=\"0\">Fill in the Blanks</option>\r\n      </select> */}\r\n\r\n\r\n\r\n\r\n\r\n    </Fragment>\r\n  )\r\n}","C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\signup.jsx",["83"],"import React, { useState } from \"react\"\r\nimport { toast } from \"react-toastify\"\r\n\r\nimport './style.css';\r\n\r\n\r\n\r\nfunction SignUp({ setAuth }) {\r\n\r\n    const [inputs, setInputs] = useState({\r\n        fname: \"\",\r\n        lname: \"\",\r\n        email: \"\",\r\n        password: \"\"\r\n    })\r\n\r\n    const { fname, lname, email, password } = inputs\r\n\r\n    const onChange = (e) => {\r\n        setInputs({ ...inputs, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const onSubmitForm = async (e) => {\r\n        e.preventDefault()\r\n\r\n        const body = { fname, lname, email, password }\r\n\r\n        try {\r\n\r\n            const response = await fetch(\"http://localhost:8000/auth/register\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-type\": \"application/json\" },\r\n                body: JSON.stringify(body)\r\n            })\r\n\r\n            const parseRes = await response.json()\r\n\r\n            if (parseRes.token) {\r\n                setAuth(true)\r\n                localStorage.setItem(\"token\", parseRes.token)\r\n\r\n\r\n            }\r\n        } catch (error) {\r\n            setAuth(false)\r\n            console.error(error.message)\r\n            window.location.reload(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"signup\">\r\n\r\n            <body>\r\n                <div class=\"page\">\r\n                    <div class=\"header\">\r\n                        <div>\r\n\r\n                            <a href=\"/\">\r\n                                <div id=\"logo\"></div>\r\n                            </a>\r\n\r\n                            <ul>\r\n                                <li class=\"selected\">\r\n                                    <a href=\"/\">Home</a>\r\n                                </li>\r\n                                <li>\r\n                                    <a href=\"/signup\">Sign Up</a>\r\n                                </li>\r\n                                <li>\r\n                                    <a href=\"/login\">Login</a>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"body\">\r\n                        <div id=\"featured\">\r\n\r\n                            <form onSubmit={onSubmitForm}>\r\n\r\n                                <input type=\"fname\" name=\"fname\" placeholder=\"First Name\" value={fname} onChange={e => onChange(e)}></input>\r\n                                <input type=\"lname\" name=\"lname\" placeholder=\"Last Name\" value={lname} onChange={e => onChange(e)}></input>\r\n                                <input type=\"email\" name=\"email\" placeholder=\"Email\" value={email} onChange={e => onChange(e)}></input>\r\n                                <input type=\"password\" name=\"password\" placeholder=\"Password\" value={password} onChange={e => onChange(e)}></input>\r\n                                <div class=\"check\">\r\n                                        <input type=\"radio\" id=\"radio02-01\" name=\"demo02\" /><label for=\"radio02-01\">Teacher</label>\r\n                                        <input type=\"radio\" id=\"radio02-02\" name=\"demo02\" /><label for=\"radio02-02\">Student</label>\r\n                                </div><br/>\r\n                                <button id=\"btn\">Submit</button>\r\n                            </form>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"footer\">\r\n                        <div>\r\n                            <p class=\"footnote\">&#169; Copyright &#169; 2011. Company name. All rights reserved</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </body>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SignUp;\r\n","C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\tacher-page.jsx",[],"C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\quiz.jsx",["84","85","86","87","88","89","90"],"C:\\Users\\kmcae\\Desktop\\online-class\\second-sem\\testing\\math-web-app\\math\\frontend\\src\\components\\problemCard.jsx",["91","92","93"],"import { Fragment, useState, useEffect } from 'react';\r\nimport './style.css';\r\nexport default function Quiz({ id, problem, solution, answer, addScore, index, formula }) {\r\n    const [choices, setChoices] = useState([])\r\n    const choicesLetters = [1, 2, 3, 4]\r\n    const [blankInput, setBlankInput] = useState();\r\n\r\n\r\n    const shuffleArray = (array) => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n    }\r\n    const fetchChoices = async (id) => {\r\n\r\n        try {\r\n\r\n            const response = await fetch(`http://localhost:8000/choices/${id}`)\r\n            const parseRes = await response.json()\r\n\r\n            //shuffle choices\r\n            shuffleArray(parseRes)\r\n\r\n            choicesLetters[0] = { id: parseRes[0].id, name: 'A.) ', content: parseRes[0].content, is_correct: parseRes[0].is_correct }\r\n            choicesLetters[1] = { id: parseRes[1].id, name: 'B.) ', content: parseRes[1].content, is_correct: parseRes[1].is_correct }\r\n            choicesLetters[2] = { id: parseRes[2].id, name: 'C.) ', content: parseRes[2].content, is_correct: parseRes[2].is_correct }\r\n            choicesLetters[3] = { id: parseRes[3].id, name: 'D.) ', content: parseRes[3].content, is_correct: parseRes[3].is_correct }\r\n\r\n            setChoices(choicesLetters)\r\n\r\n        } catch (error) {\r\n            console.error(error.message)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const handleClick = (isCorrect) => {\r\n        if (isCorrect) {\r\n            console.log(addScore())\r\n        }\r\n        else {\r\n            console.log(isCorrect)\r\n        }\r\n\r\n        let choiceContainer = document.getElementById(`choices${id}`);\r\n        choiceContainer.style.display = \"none\"\r\n    }\r\n\r\n    const onChange = (event) => {\r\n        event.preventDefault();\r\n        setBlankInput(event.target.value);\r\n    }\r\n\r\n    const handleAnswerSubmit = (event) => {\r\n        event.preventDefault();\r\n        let inputContainer = document.getElementById(`form${id}`);\r\n       \r\n        if (blankInput == answer) {\r\n            console.log(addScore())\r\n        } else {\r\n            console.log(false)\r\n        }\r\n        inputContainer.style.display = \"none\"\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        fetchChoices(id)\r\n    }, [])\r\n\r\n    return (\r\n\r\n        <div class=\"body-problem\">\r\n            <div className=\"problem-card\">\r\n\r\n                <div class=\"card border-info mb-3\">\r\n                    <div class=\"card-body\">\r\n                        <p>{problem}</p>\r\n\r\n                        {!formula ? (\r\n                            <div id={\"choices\" + id}>\r\n                                {choices.map((c) => {\r\n\r\n                                    return <div key={c.id} class=\"choices\">\r\n                                        <ul>\r\n                                            <li class=\"li-choices\">\r\n                                                <button value={c.content} onClick={() => { handleClick(c.is_correct) }}>{c.name + \" \" + c.content}</button>\r\n                                            </li>\r\n                                        </ul>\r\n                                    </div>\r\n                                })}\r\n                            </div>\r\n\r\n                        )\r\n                            : (\r\n                                <div id={\"form\" + id}>\r\n                                    <form onSubmit={handleAnswerSubmit}>\r\n                                        <input\r\n                                            id=\"blankInput\"\r\n                                            value={blankInput}\r\n                                            onChange={onChange}\r\n                                            required\r\n                                        >\r\n                                        </input>\r\n                                        <button type=\"form\">Submit</button>\r\n                                    </form>\r\n                                </div>\r\n                            )}\r\n\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}",{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":1,"column":10,"nodeType":"100","messageId":"101","endLine":1,"endColumn":18},{"ruleId":"98","severity":1,"message":"102","line":10,"column":10,"nodeType":"100","messageId":"101","endLine":10,"endColumn":17},{"ruleId":"98","severity":1,"message":"103","line":10,"column":19,"nodeType":"100","messageId":"101","endLine":10,"endColumn":29},{"ruleId":"98","severity":1,"message":"104","line":11,"column":9,"nodeType":"100","messageId":"101","endLine":11,"endColumn":23},{"ruleId":"98","severity":1,"message":"105","line":14,"column":10,"nodeType":"100","messageId":"101","endLine":14,"endColumn":20},{"ruleId":"98","severity":1,"message":"106","line":14,"column":22,"nodeType":"100","messageId":"101","endLine":14,"endColumn":35},{"ruleId":"98","severity":1,"message":"107","line":15,"column":10,"nodeType":"100","messageId":"101","endLine":15,"endColumn":22},{"ruleId":"98","severity":1,"message":"108","line":15,"column":24,"nodeType":"100","messageId":"101","endLine":15,"endColumn":39},{"ruleId":"98","severity":1,"message":"109","line":16,"column":10,"nodeType":"100","messageId":"101","endLine":16,"endColumn":17},{"ruleId":"98","severity":1,"message":"110","line":16,"column":19,"nodeType":"100","messageId":"101","endLine":16,"endColumn":29},{"ruleId":"111","severity":1,"message":"112","line":65,"column":21,"nodeType":"113","messageId":"114","endLine":65,"endColumn":25},{"ruleId":"111","severity":1,"message":"112","line":72,"column":21,"nodeType":"113","messageId":"114","endLine":72,"endColumn":25},{"ruleId":"111","severity":1,"message":"112","line":79,"column":21,"nodeType":"113","messageId":"114","endLine":79,"endColumn":25},{"ruleId":"115","severity":1,"message":"116","line":95,"column":6,"nodeType":"117","endLine":95,"endColumn":17,"suggestions":"118"},{"ruleId":"115","severity":1,"message":"119","line":101,"column":6,"nodeType":"117","endLine":101,"endColumn":8,"suggestions":"120"},{"ruleId":"98","severity":1,"message":"121","line":6,"column":10,"nodeType":"100","messageId":"101","endLine":6,"endColumn":14},{"ruleId":"98","severity":1,"message":"122","line":53,"column":17,"nodeType":"100","messageId":"101","endLine":53,"endColumn":25},{"ruleId":"98","severity":1,"message":"122","line":97,"column":17,"nodeType":"100","messageId":"101","endLine":97,"endColumn":25},{"ruleId":"98","severity":1,"message":"123","line":2,"column":10,"nodeType":"100","messageId":"101","endLine":2,"endColumn":15},{"ruleId":"98","severity":1,"message":"124","line":2,"column":23,"nodeType":"100","messageId":"101","endLine":2,"endColumn":29},{"ruleId":"115","severity":1,"message":"125","line":189,"column":6,"nodeType":"117","endLine":189,"endColumn":8,"suggestions":"126"},{"ruleId":"115","severity":1,"message":"127","line":193,"column":6,"nodeType":"117","endLine":193,"endColumn":16,"suggestions":"128"},{"ruleId":"115","severity":1,"message":"129","line":197,"column":6,"nodeType":"117","endLine":197,"endColumn":17,"suggestions":"130"},{"ruleId":"115","severity":1,"message":"131","line":201,"column":6,"nodeType":"117","endLine":201,"endColumn":19,"suggestions":"132"},{"ruleId":"98","severity":1,"message":"133","line":203,"column":12,"nodeType":"100","messageId":"101","endLine":203,"endColumn":17},{"ruleId":"115","severity":1,"message":"134","line":209,"column":6,"nodeType":"117","endLine":209,"endColumn":23,"suggestions":"135"},{"ruleId":"98","severity":1,"message":"99","line":1,"column":10,"nodeType":"100","messageId":"101","endLine":1,"endColumn":18},{"ruleId":"136","severity":1,"message":"137","line":60,"column":24,"nodeType":"138","messageId":"114","endLine":60,"endColumn":26},{"ruleId":"115","severity":1,"message":"139","line":71,"column":8,"nodeType":"117","endLine":71,"endColumn":10,"suggestions":"140"},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'choices' is assigned a value but never used.","'setChoices' is assigned a value but never used.","'choicesLetters' is assigned a value but never used.","'blankInput' is assigned a value but never used.","'setBlankInput' is assigned a value but never used.","'showSolution' is assigned a value but never used.","'setShowSolution' is assigned a value but never used.","'correct' is assigned a value but never used.","'setCorrect' is assigned a value but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchQuestions'. Either include it or remove the dependency array.","ArrayExpression",["143"],"React Hook useEffect has missing dependencies: 'fetchProblems' and 'fetchValues'. Either include them or remove the dependency array.",["144"],"'type' is assigned a value but never used.","'parseRes' is assigned a value but never used.","'toast' is defined but never used.","'random' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchProblems'. Either include it or remove the dependency array.",["145"],"React Hook useEffect has a missing dependency: 'assignVariables'. Either include it or remove the dependency array.",["146"],"React Hook useEffect has missing dependencies: 'problems' and 'replaceQuestionVariables'. Either include them or remove the dependency array.",["147"],"React Hook useEffect has a missing dependency: 'identifyChoiceProblems'. Either include it or remove the dependency array.",["148"],"'hello' is defined but never used.","React Hook useEffect has a missing dependency: 'assignChoices'. Either include it or remove the dependency array.",["149"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","React Hook useEffect has missing dependencies: 'fetchChoices' and 'id'. Either include them or remove the dependency array.",["150"],"no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [fetchQuestions, variables]",{"range":"167","text":"168"},"Update the dependencies array to be: [fetchProblems, fetchValues]",{"range":"169","text":"170"},"Update the dependencies array to be: [fetchProblems]",{"range":"171","text":"172"},"Update the dependencies array to be: [assignVariables, problems]",{"range":"173","text":"174"},"Update the dependencies array to be: [problems, replaceQuestionVariables, variables]",{"range":"175","text":"176"},"Update the dependencies array to be: [identifyChoiceProblems, newProblems]",{"range":"177","text":"178"},"Update the dependencies array to be: [assignChoices, multipleChoices]",{"range":"179","text":"180"},"Update the dependencies array to be: [fetchChoices, id]",{"range":"181","text":"182"},[2781,2792],"[fetchQuestions, variables]",[2867,2869],"[fetchProblems, fetchValues]",[5417,5419],"[fetchProblems]",[5474,5484],"[assignVariables, problems]",[5568,5579],"[problems, replaceQuestionVariables, variables]",[5642,5655],"[identifyChoiceProblems, newProblems]",[5765,5782],"[assignChoices, multipleChoices]",[2328,2330],"[fetchChoices, id]"]